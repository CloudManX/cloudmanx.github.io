<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yunma10.github.io</id>
    <title>Yunhan的博客</title>
    <updated>2021-06-14T23:45:46.632Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yunma10.github.io"/>
    <link rel="self" href="https://yunma10.github.io/atom.xml"/>
    <subtitle>学习生活记录</subtitle>
    <logo>https://yunma10.github.io/images/avatar.png</logo>
    <icon>https://yunma10.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Yunhan的博客</rights>
    <entry>
        <title type="html"><![CDATA[Advance C++ 学习笔记]]></title>
        <id>https://yunma10.github.io/post/advance-c-xue-xi-bi-ji/</id>
        <link href="https://yunma10.github.io/post/advance-c-xue-xi-bi-ji/">
        </link>
        <updated>2021-05-30T01:49:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一课-const">第一课 Const</h2>
<p>https://www.youtube.com/watch?v=7arYbAhu0aw&amp;list=PLE28375D4AC946CC3</p>
<ul>
<li>ptr to const(在*左侧) vs. const ptr(在*右侧)</li>
<li>取消常性：const_cast&lt;int&amp;&gt;() vs. 增加常性：static_cast&lt;const int&amp;&gt;()
<ul>
<li>尽量避免使用</li>
</ul>
</li>
<li>为什么使用Const？
<ul>
<li>防止inadvert的常量变化</li>
<li>Documentation</li>
<li>Compiler Optimization</li>
<li>ROM使用 （引申话题：RAM vs. ROM)</li>
</ul>
</li>
</ul>
<h2 id="第二课-const-and-functions">第二课 Const and Functions</h2>
<p>https://www.youtube.com/watch?v=RC7uE_wl1Uc&amp;list=PLE28375D4AC946CC3&amp;index=2</p>
<ul>
<li>Const Reference 作为函数的参数：
<ul>
<li>该函数内Reference的值不可改变</li>
<li>如果 Const 作为参数用在值传递(pass-by-value)而不是引用传递(pass-by-const), 则没有意义且不能Overload</li>
</ul>
</li>
<li>Const 返回值(Return Value)
<ul>
<li>同理，只有在使用引用作为返回值时才有意义</li>
</ul>
</li>
<li>Const Function
<ul>
<li>不能改变Member Variable; 不能调用没有const的Member Function</li>
<li>可以用来实现Overloading: 当对象未常量时调用该Const函数</li>
</ul>
</li>
</ul>
<h2 id="第三课-rvalue-vs-lvalue">第三课 Rvalue vs. Lvalue</h2>
<p>https://www.youtube.com/watch?v=UTUdhjzws5g</p>
<ul>
<li>左值 lvalue(addressable) - 表示了一个占据内存中某个可识别位置的对象。</li>
<li>右值 rvalue - 所有不是左值的表达式都是右值，即不表示内存中某个可识别位置的对象表达式。</li>
<li>例如 int x = 2 中，x 为左值，2为右值。
<ul>
<li>int *p = &amp;(i + 2); =&gt; Error</li>
<li>i + 2 = 4; =&gt; Error</li>
<li>2 = i; =&gt; Error</li>
</ul>
</li>
<li>左值引用: int i; int &amp;r = i;</li>
<li>右值引用: int &amp;r = 5; //Error 但可以 const int &amp;r = 5;</li>
<li>左值右值可以互转：</li>
</ul>
<pre><code class="language-cpp">        // lvalue to rvalue example 
        int i = 0;
        int x = i + 2;
        // rvalue to lvalue example
        int v[3];
        *(v+2) = 4;
</code></pre>
<ul>
<li>常见错误理解：
<ul>
<li>函数和操作符(operator)的结果是右值。反例：函数返回引用，[] operator</li>
<li>所有左值都可赋值修改。反例： const 的左值是不可赋值修改的。其余为可修改左值。</li>
<li>所有右值都不可modify。反例：</li>
</ul>
</li>
</ul>
<pre><code class="language-cpp">        class dog;
        dog().bark(); // bark() may change the state of the dog object.
</code></pre>
]]></content>
    </entry>
</feed>