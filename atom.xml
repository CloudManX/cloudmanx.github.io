<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cloudmanx.github.io</id>
    <title>Yunhan的博客</title>
    <updated>2021-10-05T05:26:29.252Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cloudmanx.github.io"/>
    <link rel="self" href="https://cloudmanx.github.io/atom.xml"/>
    <subtitle>学习生活记录</subtitle>
    <logo>https://cloudmanx.github.io/images/avatar.png</logo>
    <icon>https://cloudmanx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Yunhan的博客</rights>
    <entry>
        <title type="html"><![CDATA[Normal Transformation ]]></title>
        <id>https://cloudmanx.github.io/post/normal-transformation/</id>
        <link href="https://cloudmanx.github.io/post/normal-transformation/">
        </link>
        <updated>2021-10-04T13:43:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="法线的矩阵变换">法线的矩阵变换</h1>
<h3 id="为什么发现要单独变换">为什么发现要单独变换？</h3>
<p>图例</p>
<h3 id="变换公式推导">变换公式推导</h3>
<p>假设有一个物体，设其变换矩阵为 M, 求该物体上法线N向量相应的变换矩阵 Q:<br>
我们知道对于法线N，它的切线的向量T的变换矩阵是正常的，为M。由此可得：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>Q</mi><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>M</mi><mi>t</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
n&#x27; = Qn \\
t&#x27; = Mt
\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">Q</span><span class="mord mathdefault">n</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mi>T</mi></mrow></msup><mi>t</mi><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mo>(</mo><mi>Q</mi><mi>n</mi><msup><mo>)</mo><mi>T</mi></msup><mo>(</mo><mi>M</mi><mi>t</mi><mo>)</mo><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><msup><mi>n</mi><mi>T</mi></msup><msup><mi>Q</mi><mi>T</mi></msup><mi>M</mi><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n&#x27;^Tt = 0 \\ 
(Qn)^T(Mt) = 0 \\ 
n^TQ^TMt = 0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mi>T</mi></msup><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n^Tt = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>,</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mi>T</mi></msup><msup><mi>Q</mi><mi>T</mi></msup><mi>M</mi><mi>t</mi><mo>=</mo><msup><mi>n</mi><mi>T</mi></msup><mi>t</mi><mspace linebreak="newline"></mspace><msup><mi>n</mi><mi>T</mi></msup><msup><mi>Q</mi><mi>T</mi></msup><mi>M</mi><mo>=</mo><msup><mi>n</mi><mi>T</mi></msup><mspace linebreak="newline"></mspace><msup><mi>Q</mi><mi>T</mi></msup><mi>M</mi><mo>=</mo><mi>I</mi><mspace linebreak="newline"></mspace><mi>h</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo separator="true">,</mo><mi>Q</mi><mo>=</mo><mo>(</mo><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo>)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">    n^TQ^TMt=n^Tt \\
    n^TQ^TM = n^T \\
    Q^TM = I \\
    hence, Q = (M^{-1})^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gamma Correction]]></title>
        <id>https://cloudmanx.github.io/post/gamma-correction/</id>
        <link href="https://cloudmanx.github.io/post/gamma-correction/">
        </link>
        <updated>2021-10-03T23:13:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="gamma校准">Gamma校准</h1>
<figure data-type="image" tabindex="1"><img src="https://drive.google.com/uc?export=download&amp;id=1IKcodgZv3UE2KCeXSi3XV0RmqQT8DFGC" alt="Gamma Notes" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rendering PipeLine 知识整理]]></title>
        <id>https://cloudmanx.github.io/post/Rendering/</id>
        <link href="https://cloudmanx.github.io/post/Rendering/">
        </link>
        <updated>2021-10-03T22:12:12.000Z</updated>
        <content type="html"><![CDATA[<p>本页面为渲染相关知识总结和记录。缓慢填坑中。。。</p>
<h1 id="目录归类">目录归类</h1>
<h3 id="线性代数及矩阵变换linear-algebramatrix-transformation">线性代数及矩阵变换(Linear Algebra/Matrix Transformation)</h3>
<h3 id="光照lighting">光照(Lighting)</h3>
<h3 id="投影shadows">投影(Shadows)</h3>
<h3 id="gpu优化gpu-optimizations">GPU优化(GPU Optimizations)</h3>
<h3 id="未分类uncategorized">未分类(Uncategorized)</h3>
<ul>
<li><a href="https://cloudmanx.github.io/post/gamma-correction">Gamma校准</a></li>
</ul>
<h3 id="学习资源recommended-resources">学习资源(Recommended Resources)</h3>
<ul>
<li><a href="https://catlikecoding.com/unity/tutorials/custom-srp/">Unity3D自定义SRP</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36675543">YivanLee大佬的虚幻渲染编程专题</a></li>
<li><a href="https://www.cnblogs.com/timlly/p/13512787.html">剖析虚幻渲染体系</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ 知识随笔]]></title>
        <id>https://cloudmanx.github.io/post/c-knowledges/</id>
        <link href="https://cloudmanx.github.io/post/c-knowledges/">
        </link>
        <updated>2021-09-24T13:45:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="multithread">Multithread</h1>
<ul>
<li>线程局部存储：thread_local, __declspec(thread), __thread</li>
<li>强制内存读取：<code>volatile</code></li>
<li><code>std::atomic</code></li>
<li>C++ 线程：
<ul>
<li><code>std::thread::join()</code></li>
<li>如果需要在调用线程和新线程之间同步数据，则可以使用C++的std::promise和std::future等机制</li>
<li>强制异步：std::async(std::launch::async | std::launch::deferred), return一个future</li>
<li>上锁：</li>
</ul>
</li>
</ul>
<pre><code class="language-cpp">std::mutex mu0, mu1; // usually global

std::lock(mu0, mu1) // Ensures locking order and avoids deadlock 
std::lock_guard&lt;mutex&gt; locker0(mu0);
std::lock_guard&lt;mutex&gt; locker1(mu1);

std::unique_lock&lt;mutex&gt; locker(_mu, std::defer_lock); // Gives more flexibility, but more overhead

locker.lock();
// Operators that you want to protect
// ...
locker.unlock();

std::unique_lock&lt;mutex&gt; locker2 = std::move(locker); // Use move semantics to transfer the ownership
</code></pre>
<pre><code>* std::condition_variable, notify_one, notify_all。提供更灵活的线程间的交流。Queue的例子
</code></pre>
<h1 id="move-semanitics-and-right-value-reference">Move Semanitics and Right Value Reference</h1>
<ul>
<li>相关知识点： 左值右值， 深浅拷贝</li>
<li>推荐详细阅读： https://zhuanlan.zhihu.com/p/335994370</li>
</ul>
<h3 id="右值引用right-value-reference的作用是什么什么时候可以用到">右值引用(Right Value Reference)的作用是什么？什么时候可以用到？</h3>
<ul>
<li>右值引用是C++ 11引入的概念。常用于<strong>移动语义</strong>，主要目的是避免<strong>深</strong>拷贝。在传统的左值传参的基础上，右值传参使这一行为更加灵活。</li>
<li>移动语义：将拷贝的数据移动而非复制，避免多余的拷贝。例如：</li>
</ul>
<pre><code class="language-cpp">// std::vector方法定义
void push_back (const value_type&amp; val); //左值
void push_back (value_type&amp;&amp; val); // 右值
 
void emplace_back (Args&amp;&amp;... args); //右值

// 即可pushback 左值， 也可pushback 右值
std::vector&lt;int&gt; vec;
int a = 5;
vec.push_back(a); //左值
vec.push_back(5); //右值
</code></pre>
<h3 id="为什么移动语义需要右值引用呢为什么不能用左值引用呢">为什么移动语义需要右值引用呢，为什么不能用左值引用呢？</h3>
<ol>
<li>第二个形参：不优雅，需要额外参数 <code>Array&amp; operator=(const Array&amp; temp_array, bool move)</code></li>
<li>第一个形参：加 const 无法清空<strong>被拷贝</strong>者（temp_arrray)， 不加 const 无法传入右值。</li>
</ol>
<h3 id="stdmove和stdforward是干什么用的呢">std::move和std::forward是干什么用的呢？</h3>
<ul>
<li>将左值转为右值。std::foward主要用于模板编程的参数转发， 不常用到。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CUDA与并行编程基础]]></title>
        <id>https://cloudmanx.github.io/post/cuda-yu-bing-xing-bian-cheng-ji-chu/</id>
        <link href="https://cloudmanx.github.io/post/cuda-yu-bing-xing-bian-cheng-ji-chu/">
        </link>
        <updated>2021-08-28T12:35:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gpu-内存架构">GPU 内存架构</h2>
<h2 id="gpu-内存架">GPU 内存架</h2>
<figure data-type="image" tabindex="1"><img src="https://drive.google.com/uc?export=view&amp;id=1v1RQ8kmVbjyF7ayAZrXtVzWSnehFlMBd" alt="GPU Memories" loading="lazy"></figure>
<h3 id="global-memory">Global Memory</h3>
<ul>
<li>一个在GPU上的主要内存。</li>
<li>在GPU上存在大量Global Memory。所有的运行中的线程都可从Global Memory中读取信息。</li>
<li>所有的地址都是Byte Addressable。</li>
<li>读写速度最慢。</li>
</ul>
<h3 id="local-mmeory">Local Mmeory</h3>
<ul>
<li>另一个在GPU上的主要内存。</li>
<li>当没有足够的寄存器时，每个线程会调用Local Memory (被称作Register Spilling)。</li>
<li>Addresssable，被用于不被常量indexed数组。</li>
<li>每个线程有独立的 Local Memory。</li>
</ul>
<h3 id="caches">Caches</h3>
<ul>
<li>L1， L2 Cache作用于Global Memory和Local Memory。</li>
<li>L1 和 Shared Memory共享地址，并且Configable它们的具体分配。</li>
<li>所有的 Global Memory 读写都通过L2 Cache，包括CPU的读写请求。</li>
</ul>
<h3 id="shared-memory">Shared Memory</h3>
<ul>
<li>速度仅次于寄存器（registers），在同一个Block内的线程中被共享。</li>
</ul>
<h3 id="constant-memory">Constant Memory</h3>
<ul>
<li>只读并拥有自己的Cache。</li>
</ul>
<h3 id="texture-memory">Texture Memory</h3>
<ul>
<li>同样拥有自己的Cache。（Read-Only to GPU， Sets Up by CPU)</li>
<li>有一些额外的关于Addressing的奇技淫巧，方便一些如interpolation的计算。<br>
<img src="https://drive.google.com/uc?export=view&amp;id=155QA_Oc8SNW-gxg7uTXYwUvGaTyJKTQg" alt="Memory Access Speed" loading="lazy"></li>
</ul>
<h3 id="streams-multiprocessorssm">Streams Multiprocessors(SM)</h3>
<h3 id="warp-和-active-block-及-线程数量">Warp 和 Active Block 及 线程数量。</h3>
<ul>
<li>Warp是Scheduler执行的基本单元。每个Warp拥有32个线程</li>
<li>一个重要的提高GPU效率的方法为Latency Hidden，即当某些“远程”资源（例如贴图纹理）的读取没有到位时，可通过Context Switch来运行别的线程Warp使GPU占有率保持在一定数值。当资源到位时，可转换会之前的Warp继续运行。</li>
<li>高占有率（High Occupancy）需要足够的Warp数量:
<ul>
<li>反例1， 每个block里thread数量太少：当一个Block只有一个Warp（32 threads）， 由于每个SM最多支持16个active blocks，所以也只有16个active warp。当前硬件支持64-128个active Warp。</li>
<li>反例2， 每个block里thread数量太多：由于register总数量限制，则active blocks的数量将被迫减少，同业也导致active warp的数量减少。</li>
<li>一般选用 128 - 512 threads per block</li>
</ul>
</li>
</ul>
<h3 id="__syncthreads">__syncthreads()</h3>
<p>通过__syncthreads来确保每一段cuda代码所加载的资源完全已经准备好</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Advance C++ 学习笔记]]></title>
        <id>https://cloudmanx.github.io/post/advance-c-xue-xi-bi-ji/</id>
        <link href="https://cloudmanx.github.io/post/advance-c-xue-xi-bi-ji/">
        </link>
        <updated>2021-05-27T13:49:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一课-const">第一课 Const</h2>
<p>https://www.youtube.com/watch?v=7arYbAhu0aw&amp;list=PLE28375D4AC946CC3</p>
<ul>
<li>ptr to const(在*左侧) vs. const ptr(在*右侧)</li>
<li>取消常性：const_cast&lt;int&amp;&gt;() vs. 增加常性：static_cast&lt;const int&amp;&gt;()
<ul>
<li>尽量避免使用</li>
</ul>
</li>
<li>为什么使用Const？
<ul>
<li>防止inadvert的常量变化</li>
<li>Documentation</li>
<li>Compiler Optimization</li>
<li>ROM使用 （引申话题：RAM vs. ROM)</li>
</ul>
</li>
</ul>
<h2 id="第二课-const-and-functions">第二课 Const and Functions</h2>
<p>https://www.youtube.com/watch?v=RC7uE_wl1Uc&amp;list=PLE28375D4AC946CC3&amp;index=2</p>
<ul>
<li>Const Reference 作为函数的参数：
<ul>
<li>该函数内Reference的值不可改变</li>
<li>如果 Const 作为参数用在值传递(pass-by-value)而不是引用传递(pass-by-const), 则没有意义且不能Overload</li>
</ul>
</li>
<li>Const 返回值(Return Value)
<ul>
<li>同理，只有在使用引用作为返回值时才有意义</li>
</ul>
</li>
<li>Const Function
<ul>
<li>不能改变Member Variable; 不能调用没有const的Member Function</li>
<li>可以用来实现Overloading: 当对象未常量时调用该Const函数</li>
</ul>
</li>
</ul>
<h2 id="第三课-rvalue-vs-lvalue">第三课 Rvalue vs. Lvalue</h2>
<p>https://www.youtube.com/watch?v=UTUdhjzws5g</p>
<ul>
<li>左值 lvalue(addressable) - 表示了一个占据内存中某个可识别位置的对象。</li>
<li>右值 rvalue - 所有不是左值的表达式都是右值，即不表示内存中某个可识别位置的对象表达式。</li>
<li>例如 int x = 2 中，x 为左值，2为右值。
<ul>
<li>int *p = &amp;(i + 2); =&gt; Error</li>
<li>i + 2 = 4; =&gt; Error</li>
<li>2 = i; =&gt; Error</li>
</ul>
</li>
<li>左值引用: int i; int &amp;r = i;</li>
<li>右值引用: int &amp;r = 5; //Error 但可以 const int &amp;r = 5;</li>
<li>左值右值可以互转：</li>
</ul>
<pre><code class="language-cpp">        // lvalue to rvalue example 
        int i = 0;
        int x = i + 2;
        // rvalue to lvalue example
        int v[3];
        *(v+2) = 4;
</code></pre>
<ul>
<li>常见错误理解：
<ul>
<li>函数和操作符(operator)的结果是右值。反例：函数返回引用，[] operator</li>
<li>所有左值都可赋值修改。反例： const 的左值是不可赋值修改的。其余为可修改左值。</li>
<li>所有右值都不可modify。反例：</li>
</ul>
</li>
</ul>
<pre><code class="language-cpp">        class dog;
        dog().bark(); // bark() may change the state of the dog object.
</code></pre>
<h2 id="第四课-logic-constness-and-bitwise-constness">第四课 Logic Constness and Bitwise Constness</h2>
<p>https://www.youtube.com/watch?v=8A5AwX6XExw&amp;list=PLE28375D4AC946CC3&amp;index=3</p>
<pre><code class="language-cpp">class BigArray {
    vector&lt;int&gt; v; // huge vector
    mutable int accessCounter;
    int *v2; // 
    public:
       int getItem(int index) const {
           accessCounter++; // mutable
           return v[index];
       }

       void setV2Item(int index, int x)  {
           *(v2+index) = x; //如改为const member function也可编译通过
       }
}
</code></pre>
<p>Compiler 只关心Bitwise Constness。需要认真设计来实现logic和bitwise的consistency。<br>
我：get function应该是const的，虽然我改了个member variable。<br>
编译器: 你别整那没用的。我只管你member variable有没有被改。</p>
<h2 id="第五课-compiler-generated-functions">第五课 Compiler Generated Functions</h2>
<p>https://www.youtube.com/watch?v=EL30-a2gblQ&amp;list=PLE28375D4AC946CC3&amp;index=4</p>
<ul>
<li>天启四骑士（编译器会implicitly自动生成以下函数)
<ul>
<li>Copy Constructor （复制构造函数）</li>
<li>Copy Assignment Operator （拷贝赋值运算符）</li>
<li>Destructor （析构函数）</li>
<li>Default Constructor （默认构造函数）</li>
</ul>
</li>
</ul>
<pre><code class="language-cpp">class dog {
    public:
        dog(const dog &amp;rhs) {...}; // Member by member initialization
        dog &amp;operator=(const dog &amp;rhs) {...}; // Member by member copying
        dog() {...}; // 1. Call the base class's default constructor 2. Call data members' default constructor
        ~dog() {...}; // 1. Call all base class's destructor 2. call data members' destructor
};
</code></pre>
<p>当这些函数无法被生成时，则不生成。例：</p>
<ul>
<li>Copy Assignment Operator cannot copy const and reference members</li>
<li>base class没有default constructor, 则子函数也无法生成default constructor。</li>
</ul>
<p><strong>注意</strong>：</p>
<ol>
<li>所有的编译器自动生成的函数都是public且inline</li>
<li>当它们需要被生成时（程序的其他地方调用了它们），编译器才会生成它们。</li>
</ol>
<h2 id="第六课-disallow-functions">第六课 Disallow Functions</h2>
<p>https://www.youtube.com/watch?v=ZiNGWHg5Z-o&amp;list=PLE28375D4AC946CC3&amp;index=5</p>
<pre><code class="language-cpp">class OpenFile {
    public:
        OpenFile(string filename) {cout &lt;&lt; &quot;Open a file &quot; &lt;&lt; filename &lt;&lt; endl}
        OpenFile(OpenFile &amp;rhs) == delete; // C++ 11 and above
        voiud destroyMe() {delete this;} // calls the private destructor
    private:
        OpenFile(OpenFile &amp;rhs); // C++ 98, make the copy constructor private
        ~OpenFile() {cout &lt;&lt; &quot;OpenFile destructed.&quot; &lt;&lt; endl;} // private destructor 
};
int main() {
    OpenFile f(string(&quot;somefile&quot;));
    OpenFile f2(f); // We want to avoid two OpenFile editing one single file =&gt; disable Copy constructor
}
</code></pre>
<p>*当一个静态对象 out of scope的时候，默认的public destructor会被调用。此时private的destructor用法不合适。当对象为动态(new)时，我们可以通过这种方式强制将对象生成在栈上，来接余额宝贵的堆空间（embedded system）很常用。</p>
<h2 id="第七课-virtual-destructor-and-smart-destructor">第七课 Virtual Destructor and Smart Destructor</h2>
<p>https://www.youtube.com/watch?v=ZiNGWHg5Z-o&amp;list=PLE28375D4AC946CC3&amp;index=6</p>
<ul>
<li>方法一：Virtual Destructor</li>
</ul>
<pre><code class="language-cpp">class Dog {
    public:
    virtual ~Dog() { cout &lt;&lt; &quot;Dog destroyed&quot; &lt;&lt; endl;} //多态时， 只有设置了virtual destructor, 子类的destuctor才会被调用。
};
class YellowDog {
    public:
    ~YellowDog {cout &lt;&lt; &quot;Yellow dog destroyed&quot; &lt;&lt; endl;}
};
class DogFactory {
    public: 
    static Dog *createYellowDog() { return new YellowDog(); }
};
int main() {
    Dog *pd = DogFactory::createYellowDog();
    delete pd;
    return 0;
}
</code></pre>
<ul>
<li>方法二：Smart Destructor</li>
</ul>
<pre><code class="language-cpp">class Dog {
    public:
    ~Dog() { cout &lt;&lt; &quot;Dog destroyed&quot; &lt;&lt; endl;} 
};
class YellowDog {
    public:
    ~YellowDog {cout &lt;&lt; &quot;Yellow dog destroyed&quot; &lt;&lt; endl;}
};
class DogFactory {
    public: 
    static shared_ptr&lt;Dog&gt; createYellowDog() { return shared_ptr&lt;YellowDog&gt;(new YellowDog()); }
};
int main() {
    shared_ptr&lt;Dog&gt; pd = DogFactory::createYellowDog();
    return 0;
}
*注意，所有的STL Object都没有virtual析构函数，继承时要小心。
</code></pre>
<h2 id="第八课-exceptions-in-destructors">第八课 Exceptions in Destructors</h2>
<p>https://www.youtube.com/watch?v=LQMYwvM8RF8&amp;list=PLE28375D4AC946CC3&amp;index=7</p>
<pre><code class="language-cpp">class dog {
    public: 
    string m_name;
    dog(string name) { m_name = name; cout &lt;&lt; name &lt;&lt; &quot;is spawn.&quot; &lt;&lt; endl; }
    ~dog() { cout &lt;&lt; m_name &lt;&lt; &quot; is defeated.\n&quot; &lt;&lt; endl; }
    void bark() { ... }
};
int main() {
    try {
        dog dog1(&quot;Texas&quot;);
        dog dog2(&quot;Lappland&quot;);
        throw 20;
        dog1.bark();
        dog2.bark();
    } catch (int e) {
        catch &lt;&lt; e &lt;&lt; &quot; is caught&quot; &lt;&lt; endl;
    }
}
</code></pre>
<p>OUTPUT:<br>
Texas is spawn.<br>
Lappland is spawn.<br>
Lappland is defeated.<br>
Texas is defeated.<br>
20 is caught.</p>
<pre><code class="language-cpp">class dog {
    public: 
    string m_name;
    dog(string name) { m_name = name; cout &lt;&lt; name &lt;&lt; &quot;is spawn.&quot; &lt;&lt; endl; }
    ~dog() { cout &lt;&lt; m_name &lt;&lt; &quot; is defeated.\n&quot; &lt;&lt; endl;  throw 20; }
    void bark() { ... }
};
int main() {
    try {
        dog dog1(&quot;Texas&quot;);
        dog dog2(&quot;Lappland&quot;);
        dog1.bark();
        dog2.bark();
    } catch (int e) {
        catch &lt;&lt; e &lt;&lt; &quot; is caught&quot; &lt;&lt; endl;
    }
}
</code></pre>
<ul>
<li>程序会崩溃。因为在进入到catch的scope之前，两个dog都会调用析构函数，届时会有两个pending的exeception。</li>
<li>解决方案：
<ol>
<li>将try catch加入destructor。</li>
<li>将容易触发exception的代码放入另一个函数。</li>
</ol>
</li>
</ul>
<h2 id="第九课-virtual-function-in-constructor-or-destructor">第九课 Virtual Function in Constructor or Destructor</h2>
<p>https://www.youtube.com/watch?v=LQMYwvM8RF8&amp;list=PLE28375D4AC946CC3&amp;index=8</p>
<pre><code class="language-cpp">class Dog {
    public:
    Dog() {cout &lt;&lt; &quot;Dog is born.&quot; &lt;&lt; endl; bark(); }
    virtual void bard() { cout &lt;&lt; &quot;I am just a dog.&quot; &lt;&lt; endl; }
    void seeCat() { bark(); }
    ~Dog() { bark(); }
};

class YellowDog: public Dog {
    public:
    Yellowdog { cout &lt;&lt; &quot;Yellow dog is born&quot; &lt;&lt; endl;}
    virtual void bark() { cout &lt;&lt; &quot;I am a yellow dog&quot; &lt;&lt; endl; } // 若将 virtual 关键字省掉，依旧是虚拟函数。写在这里是为了explicitly声明。
};

int main() {
    Yellodog d;
    d.seeCat(); return 0;
}
</code></pre>
<p>Output:<br>
Dog is born.<br>
I am just a dog.<br>
Yellow dog is born.<br>
I am a yellow dog.<br>
I am just a dog.</p>
<p>尽量避免在Constructor和Destructor里调用虚拟函数。</p>
<h2 id="第十课-resource-acquisition-is-initialization">第十课 Resource Acquisition is Initialization</h2>
]]></content>
    </entry>
</feed>